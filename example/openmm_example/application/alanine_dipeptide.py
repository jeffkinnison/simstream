##########################################################################
# this script was generated by openmm-builder. to customize it further,
# you can save the file to disk and edit it with your favorite editor.
##########################################################################

from __future__ import print_function
from simtk.openmm import app
import simtk.openmm as mm
from simtk import unit
from sys import stdout

pdb = app.PDBFile('application/input.pdb')
forcefield = app.ForceField('amber03.xml', 'amber03_obc.xml')

system = forcefield.createSystem(pdb.topology, nonbondedMethod=app.NoCutoff, 
     constraints=None, rigidWater=False)
integrator = mm.LangevinIntegrator(300*unit.kelvin, 91/unit.picoseconds, 
    1.0*unit.femtoseconds)

platform = mm.Platform.getPlatformByName('CPU')
simulation = app.Simulation(pdb.topology, system, integrator, platform)
simulation.context.setPositions(pdb.positions)

print('Minimizing...')
simulation.minimizeEnergy()
print('Equilibrating...')
simulation.step(100)

simulation.reporters.append(app.PDBReporter('trajectory.pdb', 1000))
simulation.reporters.append(app.StateDataReporter(stdout, 1000, step=True, 
    potentialEnergy=True, totalEnergy=True, temperature=True, separator='\t'))

print('Running Production...')
simulation.step(100000)
print('Done!')